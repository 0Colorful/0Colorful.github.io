<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2023/07/17/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>面试题总结</title>
    <url>/2023/09/02/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<blockquote>
<p>摘要：软件测试的面试题总结</p>
</blockquote>
<span id="more"></span>

<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><h2 id="你之前在公司使用linux命令做什么"><a href="#你之前在公司使用linux命令做什么" class="headerlink" title="你之前在公司使用linux命令做什么?"></a>你之前在公司使用linux命令做什么?</h2><p>我们公司之前测试系统搭建在linux上，使用linux搭建和升级测试环境、查看后台日志等</p>
<h2 id="在之前公司，测试环境使用的是哪个linux版本"><a href="#在之前公司，测试环境使用的是哪个linux版本" class="headerlink" title="在之前公司，测试环境使用的是哪个linux版本?"></a>在之前公司，测试环境使用的是哪个linux版本?</h2><p>Centos7或更高版本(命令几乎 一致，可以通用)</p>
<h2 id="linux-下安装软件有那些方式"><a href="#linux-下安装软件有那些方式" class="headerlink" title="linux 下安装软件有那些方式?"></a>linux 下安装软件有那些方式?</h2><p>常用的有4种方式：绿色安装(解压即可使用)、yum安装(联网安装)、rpm包安装(类似exe文件安装)、源码编译安装(gcc、perl 等)</p>
<h2 id="在之前使用linux过程中，使用什么工具远程连接"><a href="#在之前使用linux过程中，使用什么工具远程连接" class="headerlink" title="在之前使用linux过程中，使用什么工具远程连接?"></a>在之前使用linux过程中，使用什么工具远程连接?</h2><p>可以讲使用过的，一般常用xmanager,它集成了xshell xftp</p>
<h2 id="常用目录及作用？"><a href="#常用目录及作用？" class="headerlink" title="常用目录及作用？"></a>常用目录及作用？</h2><p>常用目录：&#x2F;etc 配置、 &#x2F;home 家目录 、&#x2F;opt 用户安装程序、&#x2F;usr用户安装程序、&#x2F;bin 二进制可执行文件、&#x2F;dev 设备文件、&#x2F;var&#x2F;logs 日志目录</p>
<h2 id="说出几个liunx命令？"><a href="#说出几个liunx命令？" class="headerlink" title="说出几个liunx命令？"></a>说出几个liunx命令？</h2><p>mkdir、rm、rmdir、mv、cp、more、grep、find、tar、du(查看文件大小)、df(查看磁盘使用情况空间)、free (查看内存使用情况)、top (查看系统资源使用情况)、 kill、 ps（查看进程状态）、chmod (修改文件权限)、iostat（查看磁盘读写）、vmstat（查看虚拟内存）、netstat(查看网络使用情况)、sed (文档编辑工具)、awk (文本分析工具)、vi（文本编辑工具）</p>
<p>目录相关: cd mkdir rmdir pwd Is ll&#x3D;ls-l mv cp<br>文件相关: rm-rf cat more tail head vi du find<br>网络相关: ping ifconfig netstat<br>用户相关: groupadd useradd passwd su<br>权限相关: chmod chgrp chown<br>系统相关: reboot shutdown mount free df<br>进程相关: top ps kill<br>压缩相关: tar zip unzip gzip<br>其它: grep echo sh init(0– 6)</p>
<p>Vi工具  :q  :wq  :q！:wq!</p>
<p>dd: 删除光标所在的一整行(常用)<br>ndd: n为数字，删除光标所在的向下n行，例如20dd则是删除光标所在的向下20行</p>
<p>Is -la l grep log 查找当前目录含有log的文件<br>ps -ef 查看所有进程<br>kill-9 2543 强制终止2543进程</p>
<h2 id="如何使用tar命令压缩和解压gz包"><a href="#如何使用tar命令压缩和解压gz包" class="headerlink" title="如何使用tar命令压缩和解压gz包?"></a>如何使用tar命令压缩和解压gz包?</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">压缩: tar -zcvf</span><br><span class="line">tar zcvf FileName.tar.gz DirName</span><br><span class="line">解压: tar -zxvf</span><br><span class="line">tar zxvf FileName.tar.gz [-C 目标目录]</span><br></pre></td></tr></table></figure>

<h2 id="vi编辑器如何使用"><a href="#vi编辑器如何使用" class="headerlink" title="vi编辑器如何使用?"></a>vi编辑器如何使用?</h2><p>vi:接文件名参数进入文件内容界面，可进行编辑 </p>
<p>i: 切换到编辑模式</p>
<p>esc: 切换到命令模式</p>
<p>&#x2F; + 搜索内容 :</p>
<p>按n进行向下操作 </p>
<p>set nu : 给每行加行号 </p>
<p>0：跳转到文本行开头 </p>
<p>$:  跳转到文本行结尾  </p>
<p>dd :剪切一行 </p>
<p>yy：复制一行</p>
<p>s  命令来替换字符串</p>
<p><a href="https://zhuanlan.zhihu.com/p/170597585">VIM-基本编辑命令 - 知乎 (zhihu.com)</a></p>
<h2 id="文件权限改为所有者读、所在的组写，其它用户执行，如何写命令"><a href="#文件权限改为所有者读、所在的组写，其它用户执行，如何写命令" class="headerlink" title="文件权限改为所有者读、所在的组写，其它用户执行，如何写命令?"></a>文件权限改为所有者读、所在的组写，其它用户执行，如何写命令?</h2><p>Chmod u+r 文件 Chmod g+w 文件 Chmod o+x文件<br>或chmod 421文件</p>
<h2 id="查看linux文件大小"><a href="#查看linux文件大小" class="headerlink" title="查看linux文件大小?"></a>查看linux文件大小?</h2><p>可以使用ls -l文件名或者 du文件名</p>
<h2 id="重启网络服务的命令"><a href="#重启网络服务的命令" class="headerlink" title="重启网络服务的命令?"></a>重启网络服务的命令?</h2><p>service network restart 或 systemctl restart network<br>network 网络服务 firewalld防火墙 mysql数据库服务 httpd apache服务</p>
<h2 id="find命令如何使用"><a href="#find命令如何使用" class="headerlink" title="find命令如何使用?"></a>find命令如何使用?</h2><p>Find查找目录 -name 文件名称 -type 文件类型<br>Type可以填写 f (文件)  d (目录)  l (链接文件)等</p>
<h2 id="linux-如何清空日志文件的内容"><a href="#linux-如何清空日志文件的内容" class="headerlink" title="linux 如何清空日志文件的内容?"></a>linux 如何清空日志文件的内容?</h2><p>cat“” &gt; test.log 其中test.log为日志文件</p>
<h2 id="查询端口占用并杀掉占用端口的进程"><a href="#查询端口占用并杀掉占用端口的进程" class="headerlink" title="查询端口占用并杀掉占用端口的进程?"></a>查询端口占用并杀掉占用端口的进程?</h2><ul>
<li>已知程序名称查找占用了端口:举例<br>  查进程ID ps-ef|grep 程序名[如tomcat]<br>  根据上一步结果，查占用端口netstat -nap | grep pid(109)</li>
<li>已知占用了哪个端口，查程序名称<br>  查进程ID netstat -nap | grep端口(8080)<br>  根据上步结果，查应用程序名ps -ef| grep pid</li>
</ul>
<h2 id="怎么查看Tomcat日志？或者怎么看服务端日志-（优先回答这个）"><a href="#怎么查看Tomcat日志？或者怎么看服务端日志-（优先回答这个）" class="headerlink" title="怎么查看Tomcat日志？或者怎么看服务端日志 （优先回答这个）"></a>怎么查看Tomcat日志？或者怎么看服务端日志 （优先回答这个）</h2><p>在linux系统下查看tomcat日志，先进入logs目录下，</p>
<p>使用 tail –fn 命令查看实时监控tomcat运行日志 （cataline.out）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail -f cataline.out //实时查看</span><br><span class="line">tail -fn 10 cataline.out //查看10行</span><br></pre></td></tr></table></figure>

<h2 id="怎么看服务器日志？-logs是-linux系统日志"><a href="#怎么看服务器日志？-logs是-linux系统日志" class="headerlink" title="怎么看服务器日志？(logs是 linux系统日志)"></a>怎么看服务器日志？(logs是 linux系统日志)</h2><p>进入&#x2F;var&#x2F;logs目录，使用tail –f 就可以动态的查看日志了</p>
<p>（一般看下面的messages日志，它是记录系统启动后的信息和错误日志，最常用的）</p>
<h2 id="tomcat相关目录用途"><a href="#tomcat相关目录用途" class="headerlink" title="tomcat相关目录用途?"></a>tomcat相关目录用途?</h2><p>bin目录：主要用来存放Tomcat的命令</p>
<p>conf目录：存放tomcat服务器全局配置的各种文件</p>
<p>lib目录：存放Tomcat服务器所需要的所有Jar包</p>
<p>log目录：存放tomcat执行时的日志文件</p>
<p>webapps目录：Tomcat默认部署路径</p>
<p>work：临时文件夹</p>
<h2 id="怎么启动tomcat？"><a href="#怎么启动tomcat？" class="headerlink" title="怎么启动tomcat？"></a>怎么启动tomcat？</h2><p>进入tomcat的bin目录，输入.&#x2F;startup.bat 启动tomcat服务<br>（可以设置自启动，在一个配置文件修改rc.local文件里面添加tomcat运行路径就可以自启动了）</p>
<h2 id="怎么修改tomcat端口号步骤"><a href="#怎么修改tomcat端口号步骤" class="headerlink" title="怎么修改tomcat端口号步骤"></a>怎么修改tomcat端口号步骤</h2><ol>
<li><p>进入tomcat的配置文件目录（conf目录），修改Server.xml文件，找到第一个包含8080的地方</p>
</li>
<li><p>再将8080修改自己想要的端口号（使用netstat命令查看系统端口号）</p>
</li>
<li><p>再启动tomcat服务（使用.&#x2F;startup.sh），即可使用新端口访问 (修改防火墙可说也可以不说)</p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230909101830353.png" alt="image-20230909101830353"></p>
</li>
</ol>
<h2 id="测试环境部署的注意事项"><a href="#测试环境部署的注意事项" class="headerlink" title="测试环境部署的注意事项?"></a>测试环境部署的注意事项?</h2><ol>
<li>基础环境JDK MYSQL TOMCAT 版本要与生产环境保持一致</li>
<li>服务器部署架构、服务器型号也尽量与生产环境保持一致，配置可以等比例缩减</li>
<li>一般先把数据库表相关操作完成，再进行代码部署</li>
</ol>
<h2 id="简单来说，linux网站搭建步骤如下-全新安装-（搭建测试环境）"><a href="#简单来说，linux网站搭建步骤如下-全新安装-（搭建测试环境）" class="headerlink" title="简单来说，linux网站搭建步骤如下(全新安装)（搭建测试环境）"></a>简单来说，linux网站搭建步骤如下(全新安装)（搭建测试环境）</h2><ol>
<li><p>上传安装包 (jdk包，tomcat包，web网站程序包，数据库脚本)</p>
</li>
<li><p>解压JDK，配置JDK环境变量</p>
</li>
<li><p>解压tomcat包</p>
</li>
<li><p>在数据库中导入数据库脚本</p>
</li>
<li><p>将网站程序war包放到tomcat的webapps目录下</p>
</li>
<li><p>启动tomcat服务</p>
</li>
<li><p>在防火墙中开放tomcat端口号</p>
</li>
<li><p>打开浏览器，测试网站，如果网站能正常使用，环境搭建好了</p>
</li>
</ol>
<h2 id="Linux服务搭建步骤如下-微服务模式"><a href="#Linux服务搭建步骤如下-微服务模式" class="headerlink" title="Linux服务搭建步骤如下 (微服务模式)"></a>Linux服务搭建步骤如下 (微服务模式)</h2><ol>
<li>我们服务器是centos，也就是linux系统，首先会上传提测包到linux服务器 (jdk包，程序包，数据库脚本)</li>
<li>解压 JDK，配置 JDK 环境变量</li>
<li>在数据库中导入数据库脚本</li>
<li>执行jar包，启动微服务（单独启动方式：java  –jar 目录下面的jar服务包名 &amp;  (&amp;表示以后台的方式运行 )）</li>
<li>在防火墙中开放微服务端口号（一个微服务内嵌一个小型的tomcat，可以各自有端口）</li>
<li>打开浏览器或者APP，测试一下系统，如果能正常使用，环境搭建好了</li>
</ol>
<blockquote>
<p>一个war包是单服务，多个包（jar包）叫微服务（多个服务，将一个大的war包拆分成若干个小的包）</p>
</blockquote>
<h2 id="测试环境升级"><a href="#测试环境升级" class="headerlink" title="测试环境升级?"></a>测试环境升级?</h2><ul>
<li><strong>完全升级</strong></li>
</ul>
<ol>
<li>根据开发人员给的升级文档，查看代码包、数据库脚本包是否齐备</li>
<li>然后把测试环境的数据库、被测系统代码包先备份然后删除</li>
<li>然后根据开发最新的文件和代码进行升级部署操作</li>
<li>升级之后做个基本功能验证，如果验证失败，测试环境按之前的备份包回滚</li>
</ol>
<ul>
<li><strong>增量升级(补丁升级)</strong></li>
</ul>
<ol>
<li>从svn上拉取开发提交的测试补丁</li>
<li>停止tomcat</li>
<li>备份webapps下部署的项目代码(各份名称实例newdream 2019_08 27 16 _03.tar.gz)</li>
<li>使用升级补丁进行升级(升级数据库补丁(sql文件)、代码补丁(覆盖))</li>
<li>清除日志</li>
<li>启动tomcat (.&#x2F;startup.sh) - 验证是否能进入被测试系统</li>
</ol>
<h2 id="如果网址搭建好，也进入不网址，或者首页打不开？一般什么情况怎么处理？"><a href="#如果网址搭建好，也进入不网址，或者首页打不开？一般什么情况怎么处理？" class="headerlink" title="如果网址搭建好，也进入不网址，或者首页打不开？一般什么情况怎么处理？"></a>如果网址搭建好，也进入不网址，或者首页打不开？一般什么情况怎么处理？</h2><ol>
<li><p>JDK环境变量没设好（重装jdk或者重新设置）</p>
</li>
<li><p>JDK版本不匹配（下载相匹配的jdk，JDK版本也要和tomcat版本相匹配，<em>Tomcat</em>8只支持<em>jdk</em>1.7及1.7以上的<em>jdk</em>）</p>
</li>
<li><p>tomcat没启动 （没解压war包，启动war包，如果tomcat启动了，但是war没解压，这种情况就是JDK没配好）</p>
</li>
<li><p>数据库访问密码和程序连接的密码不一致</p>
</li>
<li><p>没有导入数据库脚本</p>
</li>
<li><p>程序本身错误</p>
</li>
<li><p>防火墙没开放端口号</p>
</li>
</ol>
<h2 id="如何设置固定的虚拟机ip地址？"><a href="#如何设置固定的虚拟机ip地址？" class="headerlink" title="如何设置固定的虚拟机ip地址？"></a>如何设置固定的虚拟机ip地址？</h2><p>答：修改网卡配置文件，修改动态IP地址为static静态的 ，加入IP地址，子网掩码，网关，DNS就可以</p>
<h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><h2 id="存储过程"><a href="#存储过程" class="headerlink" title="存储过程"></a>存储过程</h2><p>存储过程：是一组为了完成某个任务的特殊的SQL集合</p>
<p>什么时候用它：仅仅当数据库里面需要构造大量的数据，比如插入10万条记录</p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/QQ%E5%9B%BE%E7%89%8720230905103422-1693881272763-2.jpg" alt="QQ图片20230905103422"></p>
<h2 id="怎么插入大量数据？"><a href="#怎么插入大量数据？" class="headerlink" title="怎么插入大量数据？"></a>怎么插入大量数据？</h2><p>答:  写一个存储过程，然后使用 一个while 循环 + insert into 插入记录语句 就可以了</p>
<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><blockquote>
<p>网速：指的是下行速度（下载速度），而不是指上行速度（也就上上传速度）</p>
</blockquote>
<h2 id="请描述一下客户端和服务端的处理过程？"><a href="#请描述一下客户端和服务端的处理过程？" class="headerlink" title="请描述一下客户端和服务端的处理过程？"></a>请描述一下客户端和服务端的处理过程？</h2><p>前端到后端  客户端到服务端<br>首先客户端发出一个请求，到服务端对应的接口服务，服务端接受该请求，并分析，根据业务逻辑对该请求进行处理，如果要操作数据，则操作数据库，然后再将数据库结果返回给服务端，服务端对数据再进行处理，并响应分发给客户端，客户端接受响应，将结果显示出来</p>
<h2 id="（背这个）前端请求到后端的处理的详细过程？"><a href="#（背这个）前端请求到后端的处理的详细过程？" class="headerlink" title="（背这个）前端请求到后端的处理的详细过程？"></a>（背这个）前端请求到后端的处理的详细过程？</h2><p>首先客户端会发出一个请求，提交到附近的DNS域名服务器开始进行域名地址解析，DNS服务找到该域名对应的IP地址并返回给客户端，客户端就知道请求的服务器地址了，(操作系统)接下来就会将数据封装成HTTP数据包，开始建立TCP连接，再封装TCP数据包，发送到目标服务端，服务端接收到该请求，开始使用对应的协议解包并分析，根据业务逻辑对该请求进行处理，如果要读写数据，则还需要操作数据库，然后再将数据库结果返回给服务端，服务端对数据再进行处理，并将响应返回给客户端，客户端接收响应，将结果解析并显示出来，最后客户端发起断开链接的请求，TCP链接就会被断开，整个连接过程就结束了</p>
<h2 id="从pc机打开一个浏览器，访问百度，详细的说出整个通信过程"><a href="#从pc机打开一个浏览器，访问百度，详细的说出整个通信过程" class="headerlink" title="从pc机打开一个浏览器，访问百度，详细的说出整个通信过程"></a>从pc机打开一个浏览器，访问百度，详细的说出整个通信过程</h2><p>浏览器根据请求的URL交给DNS域名解析得到真正的IP地址，向服务器发送请求；HTTP三次握手，浏览器与服务器建立连接会话；服务器接收处理请求返回报头，此处如果浏览器访问过，缓存上有对应资源，会与服务器最后修改时间对比，一致就返回304，不一致浏览器开始下载服务器传来的资源（HTML、JS、图片等）（状态码为200），同时使用缓存；浏览器对加载到的资源（HTML、JS、CSS等）进行语法解析，建立DOM树，同时设置cookie；载入解析到的文件，渲染页面完成。</p>
<h2 id="报文格式"><a href="#报文格式" class="headerlink" title="报文格式"></a>报文格式</h2><p>请求报文(http格式)：<br>请求行（包括请求方法+URL地址+协议版本号）、请求头（headers）、请求体（body）</p>
<p>响应报文(http格式)：<br>状态行(包含HTTP版本、状态码)、响应头（headers）、响应体（body）</p>
<h2 id="HTTP请求头包含哪些内容？"><a href="#HTTP请求头包含哪些内容？" class="headerlink" title="HTTP请求头包含哪些内容？"></a>HTTP请求头包含哪些内容？</h2><p>客户端接收的内容类型、接受的语言、连接类型（长连接）、浏览器用户代理(user-Agent)、用户认证信息（bearer token方式）、cookie、编码格式 (content-type) 等等</p>
<h2 id="请求头里面的用户代理你实际中是怎么用，说过程"><a href="#请求头里面的用户代理你实际中是怎么用，说过程" class="headerlink" title="请求头里面的用户代理你实际中是怎么用，说过程"></a>请求头里面的用户代理你实际中是怎么用，说过程</h2><p>﻿User-Agent 即用户代理，简称“UA”，它是一个特殊字符串头。网站服务器通过识别 “UA”来确定用户所使用的操作系统版本、CPU 类型、浏览器版本等信息。而网站服务器则通过判断 UA 来给客户端发送不同的页面。</p>
<p>实际过程中通过修改响应报文的UA，改为手机的用户代理，用来测试手机客户端的页面的响应情况</p>
<h2 id="UDP和TCP的区别"><a href="#UDP和TCP的区别" class="headerlink" title="UDP和TCP的区别"></a>UDP和TCP的区别</h2><ol>
<li>TCP是传输控制协议，是面向连接的协议；UDP是用户数据报协议，是面向无连接的协议</li>
<li>TCP通过三次握手建立连接，四次挥手释放连接，是可靠传输；UDP是不可靠传输，可能出现丢包，乱序的情况</li>
<li>TCP仅支持一对一传输（全双工通信）；UDP支持一对多，多对多</li>
<li>TCP传输慢；UDP传输快</li>
</ol>
<h2 id="你的项目中哪些地方用的是UDP，哪些地方用的是TCP"><a href="#你的项目中哪些地方用的是UDP，哪些地方用的是TCP" class="headerlink" title="你的项目中哪些地方用的是UDP，哪些地方用的是TCP"></a>你的项目中哪些地方用的是UDP，哪些地方用的是TCP</h2><p>UDP：聊天</p>
<h2 id="TCP的可靠性由什么保证的？"><a href="#TCP的可靠性由什么保证的？" class="headerlink" title="TCP的可靠性由什么保证的？"></a>TCP的可靠性由什么保证的？</h2><p>三次握手，四次挥手<br>失败重传<br>将大的数据分割成小的数据包，给每个数据包编号</p>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><p>post请求是100%要带cookie的</p>
<p>重要的请求要带cookie</p>
<p>cookie用于维持用户身份的</p>
<h1 id="测试理论"><a href="#测试理论" class="headerlink" title="测试理论"></a>测试理论</h1><h2 id="测试流程-项目流程"><a href="#测试流程-项目流程" class="headerlink" title="测试流程  项目流程"></a>测试流程  项目流程</h2><ol>
<li>   首先产品前期调研，进行产品立项 </li>
<li>   PM（游戏就说策划！！！）梳理需求，编写产品需求说明书，拉人成立项目组</li>
<li>   测试工作就启动了，测试部也会成立测试小组参与到这个项目中来</li>
<li>   然后对需求说明书进行评审，之后我们就开始进行需求分析 </li>
<li>   需求分析完毕后，就会写一个测试计划 </li>
<li>   测试计划也要经过评审修改，先组内评审，再组外三方评审</li>
<li>   评审修改完毕后就可开始写测试用例 (三方：研发、测试、产品)</li>
<li>   测试用例也要评审和修改的 </li>
<li>   接下来，当开发编码完毕了，他们就会打个提测包给我们QA</li>
<li>   QA小组收到提测包后就开始部署新的测试环境 </li>
<li>   然后我们就会做一个冒烟测试，跑一下P0级用例（主流程用例 ）</li>
<li>   冒烟ok后，就通知小组内的成员开始正式测试了 </li>
<li>   首轮执行全量测试，在测试过程中会测出问题，就提单到缺陷库 </li>
<li>   开发就会对问题单进行修改，修改完毕后，研发会再次打个测试包到测试组 </li>
<li>   再进行回归测试（这个时间会比前一轮少个3天）</li>
<li>   经过几轮这样的测试后产品稳定了，就进行灰度发布（选取某个尾号或者某个地区推送）<br>（灰度发布用的是少量的生产环境，也是对主流程跑一遍，测试一般不到1天） </li>
<li>   灰度发布ok后，再开始全量发布（全量发布时，仍然需要对主流程冒烟一次）</li>
<li>   最后就写一个测试报告</li>
<li>   接下来就进入生产维护环节了，大概就这么一个流程。</li>
</ol>
<blockquote>
<p>立项-需求-评审需求-测试计划-编写测试用例-转提测包-部署测试环境–冒烟测试–首轮全量-发现问题并提单–回归测试–版本稳定了–灰度发布（n%）–全量灰度（100%）–写测试报包–最后就进入维护阶段</p>
</blockquote>
<h2 id="测试计划格式-是什么？"><a href="#测试计划格式-是什么？" class="headerlink" title="测试计划格式 是什么？"></a>测试计划格式 是什么？</h2><ol>
<li><p>概述      （ 测试目的、参考文档、缩略语）</p>
</li>
<li><p>测试范围  （测试范围，要测试哪些模块）</p>
</li>
<li><p>测试组网图 （比如系统架构图、测试的组网图） </p>
</li>
<li><p>测试资源需求   （比如硬件资源需求、软件资源需求、人员需求） </p>
</li>
<li><p>测试条件  （ 就是测试版本启动、测试版本停止、测试版本挂起的准则） </p>
</li>
<li><p>测试进度  （测试活动的时间安排，测试需求分析、测试用例、测试轮次的时间安排） </p>
</li>
<li><p>测试准则  （测试用例通过、测试用例失败、回归的准则、培训计划）</p>
</li>
<li><p>测试风险分析 （比如时间不足、需求变更、人员流动等风险的怎么处理）</p>
</li>
<li><p>测试策略（使用的测试方法、重点模块、测试类型的选择，用例的设计选择） </p>
</li>
<li><p>测试功能点（具体的测试功能点） </p>
</li>
<li><p>工作交付件（交付清单包含哪些？以及完成清单的日期-清单包括：用例、计划本身）</p>
</li>
</ol>
<h2 id="测试报告格式"><a href="#测试报告格式" class="headerlink" title="测试报告格式"></a>测试报告格式</h2><ol>
<li><p>简介（产品名称、版本号、参考文档）</p>
</li>
<li><p>测试资源描述（测试地点、测试人物，软件测试环境、硬件测试环境，测试组网图，测试设备）</p>
</li>
<li><p>测试时间统计（测试任务的时间， 这里面的时间是详细的每个版本的细分时间统计）</p>
</li>
<li><p>测试用例统计（测试用例执行情况分析，哪些用例通过了，哪些失败了发现问题了）</p>
</li>
<li><p>测试缺陷分析（缺陷分布情况、严重程度、遗留bug分析）</p>
</li>
<li><p>测试版本质量分析 （测试版本的质量怎么样，描述一下，能不能发布？）</p>
</li>
<li><p>测试活动评估（就是测试活动及写测试用例，脚本方面的质量的方面怎么样描述一下）</p>
</li>
</ol>
<h2 id="bug组成部分，bug包含哪些内容？bug要素"><a href="#bug组成部分，bug包含哪些内容？bug要素" class="headerlink" title="bug组成部分，bug包含哪些内容？bug要素"></a>bug组成部分，bug包含哪些内容？bug要素</h2><p>bug所属产品、模块、项目名称、测试环境、重现概率、影响版本、bug责任人、bug类型、bug标题、严重程度、bug状态、优先级、重现步骤、抄送给谁、日志附件等等</p>
<h2 id="Bug生命周期-bug-流程-bug扭转流程？"><a href="#Bug生命周期-bug-流程-bug扭转流程？" class="headerlink" title="Bug生命周期 bug 流程 bug扭转流程？"></a>Bug生命周期 bug 流程 bug扭转流程？</h2><p>首先发现bug、再定位分析bug、提交bug、分配bug、修改bug、回归验证bug、再后关闭bug</p>
<h2 id="测试各个阶段你做的事情是什么"><a href="#测试各个阶段你做的事情是什么" class="headerlink" title="测试各个阶段你做的事情是什么"></a>测试各个阶段你做的事情是什么</h2><p>需求分析阶段：进行需求评审,并提取测试点<br>写测试计划：主要的产出测试计划文档+评审<br>写测试用例阶段：就是编写测试用例了+评审<br>测试设计阶段：编写一下测试代码（接口、性能、自动化测试）<br>转测试阶段：安装测试包，部署环境<br>执行测试：执行测试用例，提出问题单，定位，分析，跟踪问题<br>上线前阶段：进行灰度发布、和全量发布，这段时间，测试组会全员值班<br>测试结束：产出测试报告文档和测试总结文档<br>运营阶段：负责生产问题的维护和跟踪解决，以及后续的版本测试。</p>
<h2 id="什么白盒、黑盒测试？"><a href="#什么白盒、黑盒测试？" class="headerlink" title="什么白盒、黑盒测试？"></a>什么白盒、黑盒测试？</h2><p>白盒测试：又称结构测试，把程序看作是一个透明的盒子，关心软件内部设计和程序实现，对所有逻辑路径进行测试，主要测试依据是模块的设计文档<br>白盒测试的测试方法：有代码检查法、路径测试法等</p>
<p>黑盒测试：也称功能测试后数据驱动测试，把程序看作一个不能打开的黑盒子，不关心软件内部，只关心输入输出，在已知产品应具有的功能的条件下，主要针对软件界面和软件功能进行测试。</p>
<h2 id="灰度发布策略是什么？"><a href="#灰度发布策略是什么？" class="headerlink" title="灰度发布策略是什么？"></a>灰度发布策略是什么？</h2><p>灰度策略：5%，10%，20%，50%，100%</p>
<h2 id="上线标准"><a href="#上线标准" class="headerlink" title="上线标准"></a>上线标准</h2><ol>
<li>功能需求全部实现，性能指标全部达到要求</li>
<li>测的软件经过了集成、系统、灰度测试</li>
<li>测试用例执行要达到100% </li>
<li>所有测试项没有遗留的严重bug，并且遗留的bug也是经过风险评估的  </li>
<li>依照项目计划达到了发版要求就可以上线</li>
</ol>
<h2 id="评审人有哪些-？"><a href="#评审人有哪些-？" class="headerlink" title="评审人有哪些 ？"></a>评审人有哪些 ？</h2><p>需求文档评审：产品经理、项目经理、研发负责人+测试负责人 + 测试人员+开发人员+UI人员（如果有美工的话）+ 架构师或者总工（如果有的话）</p>
<p>测试文档评审：产品经理、项目经理、研发前后端代表、测试负责人、测试人员、UI人员</p>
<h2 id="需求评审，需求分析-评审-有没有发现什么问题？（怎么对需求-评审-进行分析的？）"><a href="#需求评审，需求分析-评审-有没有发现什么问题？（怎么对需求-评审-进行分析的？）" class="headerlink" title="需求评审，需求分析 评审 有没有发现什么问题？（怎么对需求 评审 进行分析的？）"></a>需求评审，需求分析 评审 有没有发现什么问题？（怎么对需求 评审 进行分析的？）</h2><ol>
<li><p>看需求的准确性是否ok：检查需求是否准确、需求范围、是否并满足客户的要求</p>
</li>
<li><p>看需求是否存在不明确，或者描述比较模糊、矛盾的地方，比如没有界定范围或者类型</p>
</li>
<li><p>有隐性的需求没有被写上、或者是否有遗漏的需求</p>
</li>
<li><p>有些需求描述重复了</p>
</li>
<li><p>以及一些数据指标是否合适等</p>
</li>
<li><p>还有是否易理解，清晰明了。</p>
</li>
</ol>
<h2 id="产品上线后发现漏测怎么办？生产问题，外包bug怎么办？"><a href="#产品上线后发现漏测怎么办？生产问题，外包bug怎么办？" class="headerlink" title="产品上线后发现漏测怎么办？生产问题，外包bug怎么办？"></a>产品上线后发现漏测怎么办？生产问题，外包bug怎么办？</h2><ol>
<li><p>先分析一下客户使用的环境，排除是否因环境引起或者误操作（网络、硬件方面资源-内存占用率高）</p>
</li>
<li><p>先在测试实验室重新测试一下，重现一下这个bug，检查是这个问题是否存在？</p>
</li>
<li><p>如果是bug，再评估一下这个bug的严重性和影响范围，如果严重且影响广的话，则需要将当前版本回滚到上个版本，然后需要邀请开发产品一起确定一下修复方案</p>
</li>
<li><p>我们也会提相应的问题单到缺陷库的，监督开发人员修改，跟踪问题的解决进度，修改后，再对该问题进行回归测试</p>
</li>
<li><p>因为是漏测问题，所以要复盘，是否用例漏写了？没有覆盖到，还是各部门沟通不畅导致误解了，或者需求本身存在问题，逐个分析，写一个漏测分析总结，为什么漏测了，在例会上说一下这个情况，以规避在后续版本中出现类似现象。</p>
</li>
</ol>
<h2 id="怎么保证用例的质量？怎么保证测试的质量？"><a href="#怎么保证用例的质量？怎么保证测试的质量？" class="headerlink" title="怎么保证用例的质量？怎么保证测试的质量？"></a>怎么保证用例的质量？怎么保证测试的质量？</h2><ol>
<li>测试用例的覆盖率，必须保证需求的100%覆盖</li>
<li>测试用例的可执行，得保证测试用例能够执行 ，或者便于操作的步骤</li>
<li>测试用例的可读性，能做到让一个不懂测试的人员，也可以根据测试用例，执行用例即可达到标准</li>
<li>测试用例的评审，往往一个人的思维具有局限性，但多人进行讨论就会迸发出不一样的维度或者见解，增加测试用例的健壮性</li>
<li>及时的维护测试用例，也许一个功能的变更，或者场景的添加，就需要考虑更多的情况，保证测试用例的完整性</li>
</ol>
<h2 id="设计用例的8大方法？"><a href="#设计用例的8大方法？" class="headerlink" title="设计用例的8大方法？"></a>设计用例的8大方法？</h2><ol>
<li>等价划分类</li>
<li>边界值</li>
<li>场景法</li>
<li>错误推断法</li>
<li>因果图法</li>
<li>判定表</li>
<li>正交实验法</li>
<li>功能图法</li>
</ol>
<blockquote>
<p>等价类、边界值、场景法举例</p>
</blockquote>
<h2 id="如果问到你知道是哪个模块出错吗？"><a href="#如果问到你知道是哪个模块出错吗？" class="headerlink" title="如果问到你知道是哪个模块出错吗？"></a>如果问到你知道是哪个模块出错吗？</h2><p>一般出错会抛出异常信息，出错的异常信息中一般会有出错的方法名称或者类名或者一些关键字，大概可以看出是哪个类，哪个方法出错，结合详细设计文档，查看这个类或者方法属于哪个模块的，大致可以定位出问题是哪个模块</p>
<h2 id="上线前出现了很多bug、时间不够-，求-上线延迟-提测延期-压缩测试时间-产品要提前发布怎么办？"><a href="#上线前出现了很多bug、时间不够-，求-上线延迟-提测延期-压缩测试时间-产品要提前发布怎么办？" class="headerlink" title="上线前出现了很多bug、时间不够 ，求 上线延迟\提测延期\压缩测试时间 产品要提前发布怎么办？"></a>上线前出现了很多bug、时间不够 ，求 上线延迟\提测延期\压缩测试时间 产品要提前发布怎么办？</h2><ol>
<li>首先会将这个情况向上级领导汇报，因为这是一个重要问题（比如测试经理、项目经理）</li>
<li>我再根据自己的测试经验评估一下这个情况对测试质量或者测试的进度的影响，以及影响范围，立即召开一个会议，因为是紧急情况，会议是最高效的，邀请相关产品、项目、研发相关人员参加一个会议，区分一下任务的优先级，及时讨论一个解决方案、制定一个计划、比如处理优先级高的任务、测试重要的模块、然后加班、或者借助自动化工具实现、或者调入其他组员一起来共同完成。（尽量将对测试质量或者进度影响减到最少）</li>
<li>然后再每天及时总结分析，跟进一下任务进度，及时向领导汇报一下当前任务的进展情况，争取按时完成测试任务。</li>
<li>形成一个处理类似问题的流程。</li>
</ol>
<h1 id="项目管理工具"><a href="#项目管理工具" class="headerlink" title="项目管理工具"></a>项目管理工具</h1><p>svn， git</p>
<p>Git（本地操作，本地仓）</p>
<p>github、gitlab、gitee（远程仓）</p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><table>
<thead>
<tr>
<th>命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>git add  f1.txt</td>
<td>提交到暂存区（先修改文件，或者新增文件）</td>
</tr>
<tr>
<td>git commit -m ‘第一次版本提交’</td>
<td>从暂存区提交到本地仓</td>
</tr>
<tr>
<td>git push origin master</td>
<td>将本地仓库文件同步上传到远程仓库</td>
</tr>
<tr>
<td>git pull origin master</td>
<td>拉取远程分支，将远程仓库文件拉到本地</td>
</tr>
<tr>
<td>git clone 远程仓url</td>
<td>克隆，url是远程仓库https地址，将远程仓库克隆到本地仓库，并自动关联</td>
</tr>
<tr>
<td>git reset –-hard HEAD^</td>
<td>回退上一个版本，~10 回退到之前的10个版本</td>
</tr>
<tr>
<td>git log</td>
<td>查看完整版日志，其中可以看有的版本</td>
</tr>
<tr>
<td>git branch</td>
<td>查看本地所有分支</td>
</tr>
<tr>
<td>git status</td>
<td>显示工作目录和暂存区的状态</td>
</tr>
</tbody></table>
<h3 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h3><p>为什么冲突？<br>同一个远程文件，两个人分别pull原始文件下来后，两个人分别对文件进行了不同的修改，再push上传就会冲突，git就不知道使用那个版本为最终版本<br>（2个人修改的话，会存在3个版本，原始版本，A同学版本，B同学版本）</p>
<p>如何解决？<br>开发之间协商解决就好了。<br>比如先让A同学push上传，然后再让B同学pull拉下来，在A的修改版本的基础上再改好，再push上传就ok了</p>
<h1 id="抓包工具-Fiddler-Charles"><a href="#抓包工具-Fiddler-Charles" class="headerlink" title="抓包工具 Fiddler+Charles"></a>抓包工具 Fiddler+Charles</h1><p>Fiddler 、 Charles 抓高层协议包 http\https</p>
<p>Wireshark 能抓底层协议包 udp\tcp，无法破解https</p>
<p>三次握手</p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230831185201158.png" alt="image-20230831185201158"></p>
<p>网络上任意一个资源都有一个独立的URL地址，资源就是：文件，视频，图片。。。等都属于是资源文件</p>
<p>端口：指的就是某个进程&#x2F;一台计算机中的<strong>特定进程</strong>所提供的服务</p>
<p>fiddler不抓缓存</p>
<h2 id="服务无法连接，排查方法"><a href="#服务无法连接，排查方法" class="headerlink" title="服务无法连接，排查方法"></a>服务无法连接，排查方法</h2><ol>
<li>ping 对方 ip or 域名</li>
<li>检查防火墙</li>
<li>服务有没有启动</li>
<li>数据库服务是否正常</li>
<li>病毒</li>
</ol>
<p>请求和响应：是接口的请求和响应</p>
<p>接口：后台的一个class中的一个方法</p>
<p>所有的请求和响应都是定义在接口文档中</p>
<p>Authorization ：指的是token</p>
<p>raw：放header + body</p>
<p>浏览器是HTML解析器，客户端也有少量的算法</p>
<h2 id="Fiddler相关"><a href="#Fiddler相关" class="headerlink" title="Fiddler相关"></a>Fiddler相关</h2><blockquote>
<p>fiddler是辅助你验证功能实现的一个手段</p>
</blockquote>
<h3 id="什么时候会用到使用Fiddler"><a href="#什么时候会用到使用Fiddler" class="headerlink" title="什么时候会用到使用Fiddler?"></a>什么时候会用到使用Fiddler?</h3><ol>
<li>定位问题的时候，测试时发现缺陷，需要定位该问题是前端还是后台的问题；</li>
<li>可以断点拦截修改数据，来测试程序对于异常的处理情况；</li>
<li>可以模拟弱网环境；</li>
<li>做安全测试的时候，比如检测敏感信息是否加密，还能构造重放攻击等</li>
<li>做mock测试，模拟后台接口返回数据</li>
</ol>
<blockquote>
<p>重放攻击(Replay Attacks)又称重播攻击、回放攻击或新鲜性攻击(Freshness Attacks)，是指攻击者发送一个目的主机已接收过的包，来达到欺骗系统的目的，主要用于身份认证过程，破坏认证的正确性。</p>
</blockquote>
<h3 id="Fiddler的原理是什么？"><a href="#Fiddler的原理是什么？" class="headerlink" title="Fiddler的原理是什么？"></a>Fiddler的原理是什么？</h3><p>原理就是Fiddler是一个代理工具，位于客户端和服务器端中间，当打开Fiddler后，Fiddler会自动将浏览器上网设置为代理模式，能够拦截客户端和服务器之间的所有请求和响应。</p>
<h3 id="怎么抓取HTTPS协议的网站？"><a href="#怎么抓取HTTPS协议的网站？" class="headerlink" title="怎么抓取HTTPS协议的网站？"></a>怎么抓取HTTPS协议的网站？</h3><p>安装一个Fiddler证书，然后设置勾选“解密HTTPS通信选项”就可以了</p>
<h3 id="Fiddler哪里看请求和响应？"><a href="#Fiddler哪里看请求和响应？" class="headerlink" title="Fiddler哪里看请求和响应？"></a>Fiddler哪里看请求和响应？</h3><p>在Fiddler的查看器页签（Inspectors）可以看，上部分显示请求报文，下部分看响应报文，可以点 raw 看原始数据，就是纯文本显示的完整内容</p>
<h3 id="Fiddler怎么抓包，Fiddler怎么用的？"><a href="#Fiddler怎么抓包，Fiddler怎么用的？" class="headerlink" title="Fiddler怎么抓包，Fiddler怎么用的？"></a>Fiddler怎么抓包，Fiddler怎么用的？</h3><ol>
<li>安装fiddler</li>
<li>设置fiddler抓包参数 （如设置抓取https、允许远程主机连接），设置一下域名过滤</li>
<li>如果是抓APP包，则需要手机连接电脑上的热点，热点需要和fiddler所在机器处于同一局域网中，抓取https的话还需要装fiddler证书</li>
<li>再设置手机无线代理 </li>
<li>再操作待抓包的软件</li>
<li>在fiddler里面就能查看发送的请求和服务器返回的数据情况了</li>
</ol>
<h3 id="断点拦截"><a href="#断点拦截" class="headerlink" title="断点拦截"></a>断点拦截</h3><blockquote>
<p>请求前断点：只能改请求</p>
<p>响应后断点：只能改响应，改不了请求</p>
</blockquote>
<p>局部断点命令：bpu 断点地址（请求前） 、bpafter 断点地址（响应后）</p>
<h4 id="怎么断点的？"><a href="#怎么断点的？" class="headerlink" title="怎么断点的？"></a>怎么断点的？</h4><p>请求前断点：<br>我举个例子，比如断点一个点赞的请求信息吧(比如点赞、评论、登录、个人信息等)，先打开视频观看页面，然后在Fiddler的“自动断点菜单”中选择“请求前断点”，再做[点赞]操作(比如什么要跟随改变)，fiddler就会断点拦截[点赞]请求，包括请求方式、编码格式等信息，断点拦截是可以修改这些信息的，再修改这个请求的任何内容，包括请求方式、编码格式、入参等等，都可以改的，改了后，就更改了原本的请求内容了，再放行这个请求，再观看服务端对于修改过的请求的处理结果的情况，是否正确？是否和预期一致。</p>
<p>响应后断点：<br>比如断点一个点赞后的响应信息 (比如点赞、评论、登录、个人信息等)，先进入点赞窗口，然后在Fiddler中选择“响应后断点”，再[点赞]，fiddler会断点拦截[点赞]后的响应信息，你再修改这个响应信息，再放行，然后观察客户端对于修改后的响应的处理情况是否符合预期。</p>
<blockquote>
<p>请求前断点：比如我断点一个评论的请求信息，先打开评论页面，打开fiddler的”请求前断点“(before requests)，再在评论界面进行评论操作，fiddler会拦截评论的请求，包括请求方式、编码格式等信息，断点拦截是可以修改这些信息的，再修改这个请求的任何内容，包括请求方式、编码格式、入参等等，都可以改的，改了后，就更改了原本的请求内容了，再放行这个请求，再观察<strong>服务端</strong>对于修改过的请求的处理结果的情况，是否正确？是否和预期一致。</p>
<p>比如断点一个评论后的响应信息 ，先进入评论页面，然后在Fiddler中选择“响应后断点”，再评论，fiddler会断点拦截评论后的响应信息，你再修改这个响应信息，再放行，然后观察<strong>客户端</strong>对于修改后的响应的处理情况是否符合预期。</p>
</blockquote>
<h3 id="怎么分析是前端问题还是后端问题？（或者有个操作错误，问你怎么定位分析问题的）"><a href="#怎么分析是前端问题还是后端问题？（或者有个操作错误，问你怎么定位分析问题的）" class="headerlink" title="怎么分析是前端问题还是后端问题？（或者有个操作错误，问你怎么定位分析问题的）"></a>怎么分析是前端问题还是后端问题？（或者有个操作错误，问你怎么定位分析问题的）</h3><ol>
<li>首先排除环境引起的因素（比如手机发热问题、网络不好、客户的误操作），接下来我们会用拦截工具进行拦截分析，比如我们使用fiddler工具拦截报文，通常通过返回的状态码基本上就能判断是前后端的错误，但是我们还是会分析一下具体的请求和响应。</li>
<li>首先拦截到请求，分析请求的数据，包括请求的方式、请求地址、编码格式、请求的参数等是否正确，是否和实际一致，如果不一致，则表示请求有问题，就是上行问题，也就是直接判断前端错误。</li>
<li>如请求无问题，那么就看fiddler中拦截的响应内容是否有问题，包括响应状态码，响应内容，如果响应有问题，那么可以判断为是服务端错误，也及时下行问题，服务端错误可以结合服务端日志来进一步定位了</li>
<li>如果后端响应也无问题，但是此时前端显示错误了，那么则判断为前端错误，属于前端解析错误，通过这个思路就可以区分错误在哪一端了。</li>
</ol>
<h3 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h3><p>重放攻击是什么呢？（重念虫）<br>利用fiddler重定向功能访问本地数据，就是把你的请求通过抓包工具抓到后，再原封不动地再发送一次，两次.稍微修改了参数的值再发n次。重放攻击是黑客常用的攻击方式之一。</p>
<p><strong>操作</strong></p>
<p>Reissue Requests: 重放选中的请求<br>Reissue Unconditionally: 无茶件重发选中的请求<br>ReissueandEdit:重发并编辑，会打开一个加了断点的清求，可以进行请求和响应数据的修改<br>Reissue and Verify:重新发送请求，检查响应，如果响应与上一次请求一样，则变成绿色<br>Reissue Sequentially: 依次重放，打开一个数里设置界面，标识需要重发多少次请求<br>Reissue from Composer: 在Composer中编辑该请求</p>
<h3 id="Mock测试"><a href="#Mock测试" class="headerlink" title="Mock测试"></a>Mock测试</h3><p>模拟服务端返回，检查前端（对服务端返回的数据）的处理是否正确</p>
<p>设置规则，保持，前端发起请求，查看处理结果</p>
<p><strong>mock的概念：</strong><br>mock测试其根本任务就是能够模拟后端服务器接口数据，软件接口测试过程中，经常会遇后端接口还没有开发完成，领导就让先介入测试，然后缩短项目时间，有的人肯定会懵，接口还没开发好，怎么介入测试，其实这就涉及到了我们要说的mock了，在不需要后端服务器的情况下（因为后端还没开发完毕），通过接口测试工具模拟后端返回，从而判断前端是否能正确处理。比如前端工程师自测试时,可以将后端整个服务都 mock 掉,这其实等同于将后端的所有接口都 mock，某些场景很难去模拟—比如超时、未知错误或者、或者调用第三方接口，（和第三方接口还没协调好）</p>
<blockquote>
<p><strong>一个项目有哪些人？</strong><br>开发组（前端开发工程师–UI界面、后端开发工程师–写接口-逻辑）<br>产品经理<br>测试组<br>UI组（2-3个）（主要开发素材–图片，各类，贴图，动画）</p>
</blockquote>
<h4 id="Mock测试怎么做的？"><a href="#Mock测试怎么做的？" class="headerlink" title="Mock测试怎么做的？"></a>Mock测试怎么做的？</h4><ol>
<li>   打开fiddler的【自动回复器】页面 (AutoResponder)，并勾选启用规则(enable rules)，</li>
<li>   添加一个请求的响应规则, 响应可以是互联网地址，也可以是文件，还可以是状态码，用来模拟服务端接口回复的内容，</li>
<li>   然后保存，保存规则</li>
<li>   那么当你发这个请求时，就会返回这个指定的响应内容。</li>
</ol>
<h3 id="fiddler怎么延迟请求，延迟响应？（不是重点）"><a href="#fiddler怎么延迟请求，延迟响应？（不是重点）" class="headerlink" title="fiddler怎么延迟请求，延迟响应？（不是重点）"></a>fiddler怎么延迟请求，延迟响应？（不是重点）</h3><p>在fiddler的【自动回复器】里面，新建一个规则，勾选【启用延迟】<br>延迟请求：就在匹配规则列表中，选择一个规则，选择delay地雷,再填入一个延迟时间（比如延迟3000毫秒），然后点保持，那么你发送的请求就会被延迟这个时间发送（只是延迟请求作用）。<br>延迟响应：就在匹配规则列表中，选择一个规则，右键点击【设置延迟】，然后设置一个对应规则的延迟时间，再保存，那么你发起请求后，响应就会延迟回复。</p>
<h3 id="urlreplace"><a href="#urlreplace" class="headerlink" title="urlreplace"></a>urlreplace</h3><p>urlreplace 替换请求 ip 地址</p>
<p>在下面的编辑中输入urlreplace 原地址 新地址</p>
<h3 id="弱网测试"><a href="#弱网测试" class="headerlink" title="弱网测试"></a>弱网测试</h3><p>测试应用在弱网下的体验，以及功能是否正常，是否出现崩溃等现象</p>
<p>1ms延迟：1kb&#x2F;ms &#x3D; 1Mb&#x2F;s</p>
<p>网速 &#x3D; (1000&#x2F;毫秒) kb&#x2F;s</p>
<p>每上传下载1KB 延迟 多少毫秒</p>
<p>弱网情况下只要200KB&#x2F;S的下行速度，那么不能填1毫秒，因为1毫秒约等于1MB&#x2F;S,1M是200KB的5倍,也就是快了5倍，因为这个数字是越小越快，越大越慢，是反向倍数的，所以这个数字要填1ms <em>(1MB&#x2F;200KB)&#x3D; 1ms</em>5 &#x3D;5ms</p>
<p>200KB 的速度的延迟时间是5ms<br>100KB的速度延迟时间是 10ms</p>
<p>这个是延迟时间 和 速度是成反比的。时间越小，速度越快，时间越大，速度越慢</p>
<h4 id="Fiddler-如何限速？-弱网-（rules菜单下有个模拟限速菜单）"><a href="#Fiddler-如何限速？-弱网-（rules菜单下有个模拟限速菜单）" class="headerlink" title="Fiddler 如何限速？ 弱网 （rules菜单下有个模拟限速菜单）"></a>Fiddler 如何限速？ 弱网 （rules菜单下有个模拟限速菜单）</h4><ol>
<li>打开fiddler编写脚本窗口</li>
<li>在 “OnBeforeRequest” 函数里面，修改网络上传、下载的延时参数</li>
<li>修改参数后，保存一下脚本</li>
<li>再勾选一下 “Simulate Modem Speeds” 菜单</li>
<li>再之后发起的请求就会被延迟，也就是被限速了</li>
</ol>
<h3 id="手机抓包"><a href="#手机抓包" class="headerlink" title="手机抓包"></a>手机抓包</h3><blockquote>
<p>用户代理（User Agent，简称 UA），是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。</p>
</blockquote>
<p>抓取移动端信息：<br>将移动数据 引入到fiddler所在的设备上，经过fiddler发送出去，这样才可能抓包移动端数据</p>
<h3 id="加密"><a href="#加密" class="headerlink" title="加密"></a>加密</h3><p>加密和解密使用同一套秘钥，<strong>对称加密</strong></p>
<p>加密是一个秘钥（公钥），解密又是另外一个秘钥（私钥），它们是一一对应的，叫<strong>非对称加密</strong></p>
<p>CA认证机构，专门制作公钥和私钥的</p>
<p>凡是拦截https的消息，客户端都要安装一个证书（公钥）</p>
<h2 id="Charles"><a href="#Charles" class="headerlink" title="Charles"></a>Charles</h2><blockquote>
<p>charles 可以断点、弱网、mock、抓包分析、重放攻击（装证书）</p>
</blockquote>
<h3 id="弱网测试-1"><a href="#弱网测试-1" class="headerlink" title="弱网测试"></a>弱网测试</h3><p>配置参数解析（Throttle Setting）：</p>
<ul>
<li>Bandwidth：带宽，即上行、下行数据传输速度</li>
<li>utilisation ： 带宽利用率是总带宽的百分比，填入100%</li>
<li>round-trip latency ：请求往返延迟，往返延迟测量客户端和远程服务器之间的第一次往返通信的毫秒延迟。它用于客户端向服务器和服务器向客户端的每次请求，单位是ms。</li>
<li>MTU ：最大传输单元，即TCP包的最大size，可以更真实模拟TCP层，每次传输的分包情况。</li>
<li>Releability：连接的可靠性。这里指的是10kb的可靠率。用于模拟网络不稳定，可靠性是衡量连接完全失败的可能性。这是非常有用的模拟不可靠的网络条件。可靠性是指定为成功发射10kib消息的可能性，所以，值为50%意味着所有10kib传输一半会成功。</li>
<li>Stability ：连接稳定性，也会影响带宽可用性。用于模拟移动网络，移动网络连接一般不可靠</li>
<li>unstable quality range（不稳定质量范围）此处设置主要针对于Stability中设置中的范围</li>
</ul>
<img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230904184109313.png" alt="image-20230904184109313" style="zoom: 50%;"/>

<h2 id="弱网测试相关"><a href="#弱网测试相关" class="headerlink" title="弱网测试相关"></a>弱网测试相关</h2><p>弱网除了下载速度之外，还有其他参数 <strong>网络延迟、抖动、丢包率</strong> 等也会影响到网络的稳定性和使用体验。</p>
<h3 id="fiddler，charles弱网的缺点"><a href="#fiddler，charles弱网的缺点" class="headerlink" title="fiddler，charles弱网的缺点"></a>fiddler，charles弱网的缺点</h3><ol>
<li>需要额外的PC或者服务器，弱网环境构建成本高；</li>
<li>需要安装、部署额外的工具，并且弱网络环境需要在PC上或者Web上进行配置，使用成本高；</li>
<li>弱网络环境功能并不完善，比如Fiddler不支持丢包、抖动等弱网环境；</li>
</ol>
<blockquote>
<p>ping值：就是延迟时间</p>
<p>网络抖动值：指的是网络通信中延迟最大值与最小值之差</p>
<p>丢包率：是指测试中所丢失数据包数量和发送数据包的比率</p>
<p>下行设置为250KB<br>上行是下行的一半</p>
<p>抖动高于50ms, 丢包&gt;4%就是弱网下的表现</p>
</blockquote>
<h3 id="弱网测试具体的速度是多少？"><a href="#弱网测试具体的速度是多少？" class="headerlink" title="弱网测试具体的速度是多少？"></a>弱网测试具体的速度是多少？</h3><p>大概是每秒字节数在200KB&#x2F;s以下（一般是下行速度限制在200KB&#x2F;s以下，上行控制在100KB&#x2F;s以下）</p>
<h3 id="弱网场景是怎么考虑的？-或者你怎么设计弱网测试？"><a href="#弱网场景是怎么考虑的？-或者你怎么设计弱网测试？" class="headerlink" title="弱网场景是怎么考虑的？ 或者你怎么设计弱网测试？"></a>弱网场景是怎么考虑的？ 或者你怎么设计弱网测试？</h3><p>我们弱网测试主要模拟2G和3G场景，这些场景也就是进入电梯、地铁、高铁、车库等场景、网络切换，一般就是2G,3G场景，检查程序是否能正常使用，保证用户的体验<br>主要考虑4个场景：<br>模拟2G有1个场景：下行20KB&#x2F;s（2G最大下行速度就是20KB）<br>模拟3G有3个场景：下行65KB&#x2F;s、125KB&#x2F;s、200KB&#x2F;s、300KB&#x2F;s（游戏类）</p>
<h3 id="弱网的其他参数怎么设置？"><a href="#弱网的其他参数怎么设置？" class="headerlink" title="弱网的其他参数怎么设置？"></a>弱网的其他参数怎么设置？</h3><p>我们除了设置上下行速度外，还设置延迟时间、丢包率、网络抖动等参数<br>延迟时间：ping值高于100毫秒不合格，因此我们模拟是在80~90ms<br>丢包率：高于5%不合格，因此我们模拟丢包率为3%~4%之间<br>网络抖动：高于50ms不合格，我们模拟为30~40毫秒左右</p>
<h3 id="为什么是200KB？而不是其他的速度？"><a href="#为什么是200KB？而不是其他的速度？" class="headerlink" title="为什么是200KB？而不是其他的速度？"></a>为什么是200KB？而不是其他的速度？</h3><p>根据我们的测试经验，每秒字节数在200KB以上，大多数应用就能流畅的使用，所以我们测试部将弱网定义在200KB每秒以下</p>
<h3 id="弱网下主要检查哪些方面？"><a href="#弱网下主要检查哪些方面？" class="headerlink" title="弱网下主要检查哪些方面？"></a>弱网下主要检查哪些方面？</h3><ol>
<li>首先是前端用户体验：客户端和服务端的交互体验，比如首屏的启动时间、或者页面的响应时间等是否可以接受，页面的渲染是否及时等？</li>
<li>再考虑不同网络的弱网，比如弱网下的数据读取是否正常？</li>
<li>弱网下的基本功能是否正常，主要关注是否卡顿、崩溃、无响应、闪退、数据是否能正常传输、页面显示是否异常？</li>
<li>弱网下的切换、支付等是否正常</li>
</ol>
<h3 id="Qnet限速工具怎么用的"><a href="#Qnet限速工具怎么用的" class="headerlink" title="Qnet限速工具怎么用的"></a>Qnet限速工具怎么用的</h3><ol>
<li>先进入qnet界面，新增一个限速模板，可以起个名字</li>
<li>再选择【网络带宽】，设置一下上行下行速度</li>
<li>设置完了点一下保存，该模版就显示在工作台的列表中了</li>
<li>选择你设置的模版，模版名字变成蓝色状态，就是你选中了</li>
<li>最后选需要限速的APP应用，点启动，就可以看到对这个app限速了</li>
</ol>
<blockquote>
<p>fiddler限速原理： 每KB延迟多少，动态的延迟，有多少KB，那么延迟时间就是它的倍数</p>
<p>qnet的限速原理：直接填入总的延迟时间，不管多少数据，就是设置的这个延迟时间</p>
<p>qnet的限速原理：直接填入总的延迟时间，不管多少数据，就是设置的这个延迟时间</p>
</blockquote>
<h1 id="APP测试"><a href="#APP测试" class="headerlink" title="APP测试"></a>APP测试</h1><h2 id="三类APP"><a href="#三类APP" class="headerlink" title="三类APP"></a>三类APP</h2><ul>
<li>WEB APP：生存在浏览器中的应用，一般使用H5开发 （不需要下载安装，扫一下就可以，开发成本低，就是一个网页，数据不能存在本地） 需要网络</li>
<li>混合 APP：结合原生态APP和H5页面开发，框架不变，只更新内容 （下载安装，开发成本中，比如新闻类）需要网络 （断网了不能访问）</li>
<li>原生态APP：真正的APP，一般是java或者objectC开发，一般都要求授权，可访问手机的所有资源  （如联系人，相册等，需要下载，java，开发成本高） 绝多数操作不需要网络 比如相机，计算机就是原生态</li>
</ul>
<h2 id="adb命令"><a href="#adb命令" class="headerlink" title="adb命令"></a>adb命令</h2><blockquote>
<p>环境变量：系统变量是对全部用户有效，用户变量只针对用户</p>
<p>android debug bridge 安卓调试桥（就是调试开发的app使用）</p>
<p>androidSDK里面包含adb，如果是做app测试就装这个<br>androidstudio(开发用的），也包含adb，如果是调试代码，就装这个</p>
<p>如果只是测试adb，仅仅用platform-tools就可以了，因为这里面包含了adb命令</p>
<p>adb 主要是练习命令</p>
<p>.apk 是Android Package的缩写，即Android安装包APP，也即程序包<br>.ipa 是IOS苹果安装包后缀名（ipad去掉d就是后缀名）</p>
<p>android系统源自于linux系统，只是做了深度定制，改了个名字叫安卓</p>
</blockquote>
<p>夜神模拟器连接：adb connect 127.0.0.1:62001</p>
<p><strong>adb -s 设备名称（127.0.0.1:62001） shell   &#x2F;&#x2F;检测到多个移动设备时，如何进入系统</strong></p>
<p>从安卓系统里面退出命令：exit</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>中文意思</th>
</tr>
</thead>
<tbody><tr>
<td>adb devices</td>
<td>列出上线设备（检查上线设备）</td>
</tr>
<tr>
<td>adb shell</td>
<td>进入安卓系统</td>
</tr>
<tr>
<td>adb  start-server</td>
<td>启动adb服务</td>
</tr>
<tr>
<td>adb  kill-server</td>
<td>停止adb服务</td>
</tr>
<tr>
<td>adb install</td>
<td>安装app</td>
</tr>
<tr>
<td>adb uninstall</td>
<td>卸载ap</td>
</tr>
<tr>
<td>adb push</td>
<td>将文件上传到设备（推）</td>
</tr>
<tr>
<td>adb pull</td>
<td>从设备取文件到windows（拉）</td>
</tr>
<tr>
<td>adb logcat</td>
<td>查看日志</td>
</tr>
<tr>
<td>adb version</td>
<td>查看adb版本</td>
</tr>
<tr>
<td>adb reboot</td>
<td>重启设备</td>
</tr>
<tr>
<td>adb shell  dumpsys meminfo</td>
<td>查看内存情况</td>
</tr>
<tr>
<td>adb shell  dumpsys batterystats</td>
<td>查看电量</td>
</tr>
<tr>
<td>adb shell  dumpsys gfxinfo</td>
<td>查看帧率 FPS(不是分辨率）</td>
</tr>
<tr>
<td>adb shell  dumpsys cpuinfo</td>
<td>查看cpu使用情况</td>
</tr>
<tr>
<td>adb shell wm  size</td>
<td>查看设备分辨率</td>
</tr>
<tr>
<td>adb shell  input swipe</td>
<td>滑动</td>
</tr>
<tr>
<td>adb shell  screencap</td>
<td>截屏</td>
</tr>
<tr>
<td>adb shell  input text</td>
<td>输入文本*</td>
</tr>
<tr>
<td>adb shell  input tap</td>
<td>点某个地方*</td>
</tr>
<tr>
<td>adb shell am  start</td>
<td>启动app</td>
</tr>
<tr>
<td>adb shell am  force-stop</td>
<td>停止app</td>
</tr>
<tr>
<td>adb shell pm  clear 包名</td>
<td>清除app缓存</td>
</tr>
</tbody></table>
<p><strong>adb shell dumpsys</strong>  &#x2F;&#x2F;dumpsys 是安卓系统的一个工具 ,命令用于输出当前系统信息，默认打印出设备中所有服务的信息， 可以在命令后面加指的 service name</p>
<table>
<thead>
<tr>
<th>查看包名</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>adb shell dumpsys window w | findstr [name]</td>
<td>输出当前app启动的信息到窗口</td>
</tr>
<tr>
<td><strong>adb shell dumpsys window | findstr mCurrentFocus</strong></td>
<td>查看包名(CurrentFocus当前窗口)</td>
</tr>
<tr>
<td>adb shell pm list packages</td>
<td>查看所有包名</td>
</tr>
<tr>
<td>adb shell pm list packages -3</td>
<td>查看第三方包名</td>
</tr>
<tr>
<td>adb shell pm list packages [包名关键字]</td>
<td>根据关键字模糊匹配查找包</td>
</tr>
</tbody></table>
<img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/QQ%E5%9B%BE%E7%89%8720230905144747-1693896477546-2.jpg" alt="QQ图片20230905144747" style="zoom: 67%;" />

<blockquote>
<p>monkey执行错误的一个关键词：ANR<br>app的包名一般是公司域名的反写</p>
</blockquote>
<h3 id="启动页"><a href="#启动页" class="headerlink" title="启动页"></a>启动页</h3><p>Android四大组件有Activity，Service服务，Content Provider内容提供，BroadcastReceiver广播接收器。</p>
<blockquote>
<p>acitivity: 一个窗口, 看起来像前端</p>
<p>Service服务： 就是后台服务</p>
<p>Content Provider内容提供： 就是数据库，存储数据用的</p>
<p>广播接收器： 接收广播（来电，系统通知）、接收其他app发过来的消息</p>
</blockquote>
<p><strong>查看app启动页的步骤</strong></p>
<ol>
<li>输入<code>adb logcat -c</code> 先清除android设备日志</li>
<li>输入<code>adb logcat ActivityManager:i *:s</code> 敲回车 </li>
<li>启动APP</li>
<li>APP启动完毕后Ctrl+c 退出</li>
<li>查看第一行中会有包名和启动页（看cmp&#x3D;后面的内容）</li>
</ol>
<blockquote>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230905162430620-1694003395546-1.png" alt="image-20230905162430620"></p>
</blockquote>
<p><strong>启动指定的APP</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell am start 包名/启动页</span><br><span class="line"></span><br><span class="line">adb shell am start com.tencent.mobileqq/.activity.LoginActivity</span><br></pre></td></tr></table></figure>

<p><strong>关闭指定包名的APP</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell am force-stop 包名</span><br><span class="line"></span><br><span class="line">adb shell am force-stop com.tencent.mobileqq</span><br></pre></td></tr></table></figure>

<p><strong>查看启动时间</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell am start -W -S 包名/启动页</span><br><span class="line"></span><br><span class="line">adb shell am start -W -S com.tencent.mobileqq/.activity.LoginActivity</span><br></pre></td></tr></table></figure>

<p><strong>TotalTime</strong>：从点app一连串启动Activity的第一个Activity窗口开始算起始时间</p>
<blockquote>
<img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230905161402659.png" alt="image-20230905161402659" style="zoom: 67%;" />
</blockquote>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230905163604025-1694003403783-3.png" alt="image-20230905163604025"></p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230906140747572-1694003406602-5.png" alt="image-20230906140747572"></p>
<h4 id="冷启动-热启动"><a href="#冷启动-热启动" class="headerlink" title="冷启动 热启动"></a>冷启动 热启动</h4><p>冷启动：后台被关闭了，当首次启动应用时，后台没有该应用的进程，重新创建该应用所花费的时间（启动时间不超过3秒）<br>热启动：后台没关闭，应用从后台启动所花费的时间（启动时间不超过1秒）</p>
<h4 id="有哪几个方式获得启动时间"><a href="#有哪几个方式获得启动时间" class="headerlink" title="有哪几个方式获得启动时间"></a>有哪几个方式获得启动时间</h4><ol>
<li>adb命令</li>
<li>埋点</li>
<li>使用高速相机、连续拍照，单张时间*4.2ms（速度每秒240张）</li>
<li>fiddler、charles抓包（主要说前三个）</li>
</ol>
<h3 id="文件互传"><a href="#文件互传" class="headerlink" title="文件互传"></a>文件互传</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb push 本地路径\文件  安卓的远程路径（非根目录）</span><br><span class="line">adb pull 安卓的远程路径/文件   本地路径（不能直接D盘根目录）</span><br></pre></td></tr></table></figure>

<h3 id="APK安装"><a href="#APK安装" class="headerlink" title="APK安装"></a>APK安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">安装</span><br><span class="line">adb install 本地路径\app程序名.apk</span><br><span class="line"></span><br><span class="line">覆盖安装(-r replace)</span><br><span class="line">adb install -r e:\demo.apk</span><br><span class="line"></span><br><span class="line">降级安装(-d downgrade)</span><br><span class="line">adb install -r -d e:\demo.apk</span><br><span class="line"></span><br><span class="line">卸载</span><br><span class="line">adb uninstall 包名</span><br></pre></td></tr></table></figure>

<h3 id="耗电量"><a href="#耗电量" class="headerlink" title="耗电量"></a>耗电量</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">获取整个设备的电量消耗信息</span><br><span class="line">adb shell dumpsys batterystats (这个就需要取前后差值）</span><br><span class="line"></span><br><span class="line">获取某个apk的电量消耗信息</span><br><span class="line">adb shell dumpsys batterystats 包名</span><br></pre></td></tr></table></figure>

<blockquote>
<p>耗电量单位是毫安时mah</p>
<p>耗电：Estimated power use (mAh) –估算使用量</p>
</blockquote>
<h3 id="查看系统状态-top"><a href="#查看系统状态-top" class="headerlink" title="查看系统状态 top"></a>查看系统状态 top</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell top 		// 动态查看设备cpu和内存占用情况（单个程序） (瞬时占用率） </span><br><span class="line">adb shell top –n 2  //刷新2次</span><br></pre></td></tr></table></figure>

<h3 id="top-命令包含哪些内容"><a href="#top-命令包含哪些内容" class="headerlink" title="top 命令包含哪些内容"></a>top 命令包含哪些内容</h3><p>PID（进程id），user，内存%，cpu%，进程名称，PR（优先级），</p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230906183930560-1694003411163-7.png" alt="image-20230906183930560"></p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell ps       // 查看进程列表</span><br><span class="line">adb shell ps|findstr &quot;进程字符串&quot;</span><br></pre></td></tr></table></figure>

<h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>要获取具体应用的内存信息，可加上包名（看 pss TOTAL）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys meminfo PACKAGE_NAME</span><br></pre></td></tr></table></figure>

<blockquote>
<p>PSS total： 物理内存</p>
</blockquote>
<h3 id="FPS"><a href="#FPS" class="headerlink" title="FPS"></a>FPS</h3><blockquote>
<p>30fps表示1秒钟的视频能够拍30帧，由30帧构成这个1秒的动画</p>
<p>计算机是数字信号，信息是离散（将现实世界抽样存储的）<br>而现实世界是模拟的，信息是连续的</p>
<p>帧就是抽样出来的一个静态的切片</p>
<p>帧率：每秒帧数，也就1000ms内的单帧的个数</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 查看指定包的帧率</span><br><span class="line">adb shell dumpsys gfxinfo com.ibox.calculators &gt; D:\TestServer\androidAPP\bt202309.txt</span><br></pre></td></tr></table></figure>

<blockquote>
<p>要打开开发者模式，设置GPU呈现模式分析</p>
<p>Draw + Process + Execute &#x3D; 完整显示一帧的耗时</p>
<p>单帧渲染超时会挤压1秒内的其他帧的渲染时间，导致1秒的时间到了，帧数不够，进而带来卡顿的感觉</p>
<p>APP滑动操作跟刷新频率相关。因此滑动时FPS接近于刷新频率的</p>
</blockquote>
<blockquote>
<p>linux命令：执行某命令后 可以将结果输出到一个文件中，使用 &gt; 创建一个新文件，覆盖（先干掉文件之前的内容，再写入）</p>
<p>&gt;&gt; 追加模式（在原有文件后面继续写入，不会覆盖之前的内容）</p>
</blockquote>
<h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell dumpsys cpuinfo</span><br></pre></td></tr></table></figure>

<p>平均负载Load：平均1分钟，5分钟和15分钟，值不超过1</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell input swipe 200 1000 500 1000  后可跟滑动时间单位毫秒 </span><br><span class="line">adb shell input  text   liudehua  // 输入文本</span><br><span class="line">adb  shell input  tap 500 900    //点击某位置,坐标位置都是分辨率</span><br><span class="line">adb shell wm size    	//显示设备分辨率</span><br><span class="line">adb reboot     			//重启手机android系统</span><br><span class="line">adb shell screencap  -p  /sdcard/sc.png  //截屏</span><br></pre></td></tr></table></figure>

<h2 id="Monkey"><a href="#Monkey" class="headerlink" title="Monkey"></a>Monkey</h2><p>monkey缺点：不能定制事件，不能按照预期结果执行某个事件</p>
<p>monkey 是做稳定性测试</p>
<p>随机乱点，检查是否崩溃</p>
<h3 id="monkey日志等级（深度）"><a href="#monkey日志等级（深度）" class="headerlink" title="monkey日志等级（深度）"></a>monkey日志等级（深度）</h3><p>-v : 仅提供启动提示、测试完成和最终结果等少量信息<br>-v -v : 提供较为详细的日志，包括发送到每个窗口(Activity)的事件信息<br>-v -v -v : 最详细的日志，包括了测试的&#x2F;未测试的内置的Activity信息也显示出来了</p>
<h3 id="Monkey-命令参数有哪些？"><a href="#Monkey-命令参数有哪些？" class="headerlink" title="Monkey 命令参数有哪些？"></a>Monkey 命令参数有哪些？</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-p  //指定包名（如何防止事件数发送到其他APP上）</span><br><span class="line">-v  //指定日志等级</span><br><span class="line">-s  //随机数种子，如果运行2次monkey的seed值相同，则两次Monkey测试所产生的事件操作步骤也完全相同的</span><br><span class="line">--throttle     //指定用户操作(即事件)间的时延</span><br><span class="line">--ignore-crashes   //添加一个忽略崩溃的参数，发生崩溃继续发送未完事件</span><br><span class="line">--ignore-timeouts  //添加一个忽略超时的参数，发生超时时继续执行未完事件</span><br></pre></td></tr></table></figure>

<blockquote>
<p>monkey重现bug：带一个s 随机种子参数</p>
</blockquote>
<h3 id="Monkey运行命令格式"><a href="#Monkey运行命令格式" class="headerlink" title="Monkey运行命令格式"></a>Monkey运行命令格式</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb shell monkey  –p 包名 –s 随机种子 –v –v -v 事件数量</span><br><span class="line"></span><br><span class="line">完整的命令</span><br><span class="line">adb shell monkey –p 包名 –s 随机种子 –throttle 思考时间 (跟事件类型%) --pct-touch 50 </span><br><span class="line">--pct-motion 50 --ignore-crash  –v –v –v 事件个数</span><br></pre></td></tr></table></figure>

<p><strong>没有加思考时间的耗时（跟CPU、内存的运行速度有关）</strong></p>
<p>5w事件，大概是30-40分钟<br>10w 事件，大概是1个多小时<br>15w事件，大概是2个小时</p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230907100715068.png" alt="image-20230907100715068"></p>
<h3 id="如何进行monkey测试？"><a href="#如何进行monkey测试？" class="headerlink" title="如何进行monkey测试？"></a>如何进行monkey测试？</h3><ol>
<li>先再下载一个adb工具，并配置adb环境变量</li>
<li>安装模拟器或者使用一个手机链接电脑 </li>
<li>在模拟器中或者手机中安装待测app程序</li>
<li>利用adb工具调用monkey命令对测试app程序进行稳定性测试</li>
<li>monkey跑完后，再分析日志</li>
</ol>
<h3 id="如何进行monkey日志分析？"><a href="#如何进行monkey日志分析？" class="headerlink" title="如何进行monkey日志分析？"></a>如何进行monkey日志分析？</h3><p>会分析日志，monkey测试就是要分析日志才知道测试的情况。<br>看Monkey的运行日志，如果显示monkey finished，表示本次测试是ok的，没有问题。<br>否则，就查看日志信息 ，在日志文件中搜索存在 ANR&#x2F;exception&#x2F;crashed&#x2F;error&#x2F;fail (无响应&#x2F;异常&#x2F;崩溃&#x2F;错误&#x2F;失败）关键字。如果出现这些关键字，则表明app程序运行有错误，那么我们就导出日志，并提问题单。</p>
<blockquote>
<p>ANR&#x2F;EXCEPTION&#x2F;CRASHED&#x2F;ERROR&#x2F;FAIL</p>
<p>application not response ANR 应用无响应</p>
<p>数组越界、读写异常就会导致exception</p>
</blockquote>
<h2 id="日志"><a href="#日志" class="headerlink" title="日志"></a>日志</h2><p>安卓有7个日志级别，主要看E,F级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Adb logcat *:E     //打印级别为E,F级别的信息所有信息 (* 表示输出所有app）</span><br></pre></td></tr></table></figure>

<blockquote>
<p>E —— Error（错误）——-主要看这个级别<br>F —— Fatal（严重错误）——和看这个级别的</p>
</blockquote>
<p>日志相关命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">adb logcat</span><br><span class="line">adb logcat -t</span><br><span class="line">adb logcat *：E</span><br><span class="line">adb logcat|findstr app包名或者关键词 &gt; d:\xxx\xxx.log</span><br></pre></td></tr></table></figure>

<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230907104643435.png" alt="image-20230907104643435"></p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230907104653097.png" alt="image-20230907104653097"></p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230907110943037.png" alt="image-20230907110943037"></p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230907110947873.png" alt="image-20230907110947873"></p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/image-20230907112443984.png" alt="image-20230907112443984"></p>
<blockquote>
<p>获取root（越狱）：拿到了超级用户root的权限。越狱后果可能手机会变砖</p>
</blockquote>
<p><code>adb bugreport </code>：当没有手机权限时，无法从某些目录获取文件日志，就直接使用这个命令</p>
<p><strong>从哪里取anr无响应日志</strong>：从&#x2F;data&#x2F;anr目录下有一个trace.txt文件，pull一下就可以了</p>
<blockquote>
<p>ANR: 按键事件无响应、后台进程无响应</p>
</blockquote>
<h2 id="真机测试"><a href="#真机测试" class="headerlink" title="真机测试"></a>真机测试</h2><ol>
<li>用usb链接手机，安装驱动</li>
<li>找内置计算机包名</li>
<li>执行adb monke -p 包名 测试</li>
</ol>
<h3 id="云测"><a href="#云测" class="headerlink" title="云测"></a>云测</h3><p>云测也是利用monkey，或者appium等，或者自研测试工具，对客户上传的app进行所选机型遍历测试，包括兼容性的安装测试，启动测试，运行测试，卸载测试；性能方面的启动时间、安装时间、 CPU 、内存、 GPU 、 FPS 、网络流量、电池温度等等</p>
<h2 id="性能测试-兼容测试"><a href="#性能测试-兼容测试" class="headerlink" title="性能测试 兼容测试"></a>性能测试 兼容测试</h2><blockquote>
<p>perfdog是实时采样的</p>
</blockquote>
<h3 id="兼容测试内容"><a href="#兼容测试内容" class="headerlink" title="兼容测试内容"></a>兼容测试内容</h3><p>不同的系统，不同的厂商，不同的系统版本，不同的屏幕尺寸，不同的屏幕样式，不同的机型，不同的app版本</p>
<blockquote>
<p> 测试新品 10台机型</p>
</blockquote>
<h3 id="为什么要测试不同系统"><a href="#为什么要测试不同系统" class="headerlink" title="为什么要测试不同系统"></a>为什么要测试不同系统</h3><p>app运行在OS上，需要调用OS的很多基础类库（函数），操作系统的升级实质就是UI的更新，函数的更新。不能适配所有系统的接口函数，导致无法运行</p>
<p>API函数，因为操作系统不同版本之间,API函数升级导致的</p>
<h3 id="兼容性会出现哪些问题"><a href="#兼容性会出现哪些问题" class="headerlink" title="兼容性会出现哪些问题"></a>兼容性会出现哪些问题</h3><ol>
<li>会出现崩溃</li>
<li>会闪退</li>
<li>页面的布局问题</li>
</ol>
<h3 id="PerfDog怎么用？（括号的不要念）"><a href="#PerfDog怎么用？（括号的不要念）" class="headerlink" title="PerfDog怎么用？（括号的不要念）"></a>PerfDog怎么用？（括号的不要念）</h3><ol>
<li>   先将手机使用USB连接到电脑（先USB连接，再使用wifi，再断开USB连接–防止充电）</li>
<li>   连接到电脑后，选择perfdog界面里面的链接的手机设备，再选择你要测试的APP</li>
<li>   选择APP后，并操作APP上相应的业务，比如上下滑动、左右滑动、页面切换、进入退出模块、浏览查询…等基础业务 (要结合你实际的项目来说（比如电商系统，测试进入首页浏览商品；直播，测试观看直播，发布评论）），perfdog会实时采集到各种指标的性能数据，得到一个趋势图</li>
<li>   业务操作完毕后，我们就在云端对性能数据进行分析（excel报告 or 云端看板）</li>
<li>   关心的指标是: FPS流畅度&#x2F;CPU&#x2F;内存&#x2F;GPU利用率&#x2F;流量&#x2F;电量&#x2F;Jank卡顿率等指标</li>
<li>   我们对于每个业务功能点，我们都每次采集20秒左右，记录指标的平均值和峰值，然后分析，大概是这么做的</li>
</ol>
<h3 id="那么指标是怎么分析的呢？"><a href="#那么指标是怎么分析的呢？" class="headerlink" title="那么指标是怎么分析的呢？"></a>那么指标是怎么分析的呢？</h3><ol>
<li>   内存利用率，不同的端，值不一样：<br> Android端：单个应用不超过系统分配的最大的内存就可以了（如果问到具体的，就说900M )<br> IOS苹果系统：内存不能超过单个应用分配最大内存的65% </li>
<li>   CPU利用率要 &lt; 30%，峰值 &lt; 50%</li>
<li>   流量使用情况 不超过当前网络传输速度的一半就可以</li>
<li>   电量使用情况 &lt; 250毫安时</li>
<li>   FPS流畅度：快速滑动时 &gt;55fps，视频播放 &gt; 25fps，静态页面FPS&#x3D;0，游戏战斗接近&gt;59帧以上.</li>
<li>   Jank卡顿率 &lt; 5% (卡顿时长&#x2F;使用时长）</li>
<li>   页面响应时间（高速相机、代码埋点输出时间日志）<br> 原生态的：点按钮、切换等响应时间不能超过1秒（优秀：100ms以下，一般：在500ms以下，提单：1秒以上）<br> 非原生态的：混合H5页面的（向服务端拉取数据经过网络的）：不能超过5秒（优秀：1秒，一般：3秒，提单：超过5秒）</li>
<li>   GPU占用率 &lt; 90% 就算正常</li>
</ol>
<ol start="9">
<li>启动时间<br>冷启动：不超过3秒<br>热启动：不超过1秒</li>
</ol>
<h3 id="兼容性机型怎么选择的？（怎么选择）"><a href="#兼容性机型怎么选择的？（怎么选择）" class="headerlink" title="兼容性机型怎么选择的？（怎么选择）"></a>兼容性机型怎么选择的？（怎么选择）</h3><p>我们一般选择市面上使用的</p>
<ol>
<li>主流机型，选top 20的机型</li>
<li>售量比较广的、属于厂商主力的机型</li>
<li>不同屏幕分辨率的</li>
<li>也会选出新近推出的机型 </li>
<li>不同的系统</li>
</ol>
<h3 id="性能（兼容）性测试时，高中低用了那几款机型，说具体的型号"><a href="#性能（兼容）性测试时，高中低用了那几款机型，说具体的型号" class="headerlink" title="性能（兼容）性测试时，高中低用了那几款机型，说具体的型号?"></a>性能（兼容）性测试时，高中低用了那几款机型，说具体的型号?</h3><ul>
<li><p>IOS苹果: </p>
<p> iphone se中端、iphone11中端、iphone13高端 各挑一款</p>
</li>
<li><p>安卓：<br>高端：mate系统<br>中端：华为nove系列<br>低端：麦芒系列</p>
</li>
</ul>
<h3 id="高中低三挡机性能指标区别为（不重要，这个数值说个大概就可以）"><a href="#高中低三挡机性能指标区别为（不重要，这个数值说个大概就可以）" class="headerlink" title="高中低三挡机性能指标区别为（不重要，这个数值说个大概就可以）"></a>高中低三挡机性能指标区别为（不重要，这个数值说个大概就可以）</h3><p>cpu占有率：高端机应该 &lt; 20%，中端机 &lt; 30% ，低端机 &lt; 40%<br>内存使用情况：高端机 &lt; 800M，中端机 &lt; 600M，低端机 &lt; 400M<br>帧率：比如滑动操作：高端机 &gt; 55 FPS，中端机 &gt; 45 FPS，低端机 &gt; 40 FPS </p>
<blockquote>
<p>高中低如何区分？(CPU)<br>高档机 骁龙8系列 （2021年开始采用新的命名：8gen1、8gen2）<br>中档机 骁龙7系列<br>低档机 骁龙6系列</p>
<p>判断一个机器的等级：cpu（主要）、memory（次要）</p>
<p>cpu厂商：台湾的联发科、美国高通、中国的海思</p>
<p>海思的芯片名字叫麒麟</p>
</blockquote>
<h3 id="性能指标怎么来的？-值是怎么来的？-两种方式"><a href="#性能指标怎么来的？-值是怎么来的？-两种方式" class="headerlink" title="性能指标怎么来的？ 值是怎么来的？ 两种方式"></a>性能指标怎么来的？ 值是怎么来的？ 两种方式</h3><ol>
<li>一般是客户提出来的指标，产品经理整理的。</li>
<li>如果客户没有要求，是我们测试部依照测试经验、对相关同类型的产品的分析，我们查询到竞品的数据，然后和产品部，研发部，综合讨论考虑得出来的作为我们性能指标。</li>
</ol>
<h3 id="APP-crash、闪退、崩溃、是什么原因？"><a href="#APP-crash、闪退、崩溃、是什么原因？" class="headerlink" title="APP crash、闪退、崩溃、是什么原因？"></a>APP crash、闪退、崩溃、是什么原因？</h3><ol>
<li>   可能是版本不兼容导致的崩溃  </li>
<li>   屏幕分辨率不兼容 </li>
<li>   运行内存不足（当系统内存不足时正在运行的APP可能会被系统强制终止）</li>
<li>   依赖包没有被安装 </li>
<li>   版本没及时更新</li>
<li>   没有对异常进行处理</li>
</ol>
<h3 id="请求后，出现无响应ANR、白屏可能是什么原因引起的？"><a href="#请求后，出现无响应ANR、白屏可能是什么原因引起的？" class="headerlink" title="请求后，出现无响应ANR、白屏可能是什么原因引起的？"></a>请求后，出现无响应ANR、白屏可能是什么原因引起的？</h3><ol>
<li>   首先可能是设备硬件性能不行，比如CPU，GPU,内存不能很好的处理运算和渲染</li>
<li>   可能是网络问题，网络访问超时</li>
<li>   后台算法不合理耗时</li>
<li>   数据读写超时</li>
<li>   数据库操作超时</li>
</ol>
<h3 id="卡顿原因有2种"><a href="#卡顿原因有2种" class="headerlink" title="卡顿原因有2种"></a>卡顿原因有2种</h3><ol>
<li>掉帧，掉帧就是1秒内帧数不够的情况。</li>
<li>单帧渲染超时，就是非均匀渲染，帧率高不一定流畅， 1秒内帧数足够但是其中部分单帧渲染超时的情况。</li>
</ol>
<h3 id="电量具体怎么测的？"><a href="#电量具体怎么测的？" class="headerlink" title="电量具体怎么测的？"></a>电量具体怎么测的？</h3><p>因为perfdog测试的是整机电量，那么测试前，先关闭其他后台进程，还要关闭蓝牙，GPS定位等等，测前先记录一下整机电量，然后选定测试场景以及测试时长，取测前测后两次电量差，就是该场景这个时长的耗电量，再转换为60分钟耗电量就得出1个小时的耗电量了</p>
<h3 id="那APP性能测试遇到什么bug没有？"><a href="#那APP性能测试遇到什么bug没有？" class="headerlink" title="那APP性能测试遇到什么bug没有？"></a>那APP性能测试遇到什么bug没有？</h3><p>主要问题是：卡顿（FPS比较低）、内存泄漏、ANR无响应比较多</p>
<h3 id="什么是内存溢出？-OOM"><a href="#什么是内存溢出？-OOM" class="headerlink" title="什么是内存溢出？ OOM"></a>什么是内存溢出？ OOM</h3><p>是指程序在申请内存时，没有足够的内存空间给它使用的这种情况，出现out of memory情况</p>
<h3 id="什么是内存泄漏？内存泄露"><a href="#什么是内存泄漏？内存泄露" class="headerlink" title="什么是内存泄漏？内存泄露"></a>什么是内存泄漏？内存泄露</h3><p>指程序运行时分配了内存，但是在程序结束时没有释放这部分内存</p>
<blockquote>
<p>关系：持续的内存泄漏最终会导致内存溢出（没有内存了）</p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/QQ%E5%9B%BE%E7%89%8720230908103959.jpg" alt="QQ图片20230908103959"></p>
<p>内存泄漏例子：<br>这是正常玩APP，APP运行了30分钟的内存趋势图<br>结论：内存持续上升，存在内存泄露</p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/QQ%E5%9B%BE%E7%89%8720230908104043.jpg" alt="QQ图片20230908104043"></p>
<p>一个优秀的无内存泄漏的APP通常情况内存是有上升有回落，多次运行同一个功能也不会导致内存功能持续上升；呈现出起伏状态的。</p>
<p><img src="/assets/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93.assets/QQ%E5%9B%BE%E7%89%8720230908114553.jpg" alt="QQ图片20230908114553"></p>
<p>内存泄漏</p>
<p>内存走势呈一直向上趋势，（程序结束之后）没有回到程序开始之前的状态，就是内存泄漏了</p>
</blockquote>
<h3 id="怎么判断内存泄漏？"><a href="#怎么判断内存泄漏？" class="headerlink" title="怎么判断内存泄漏？"></a>怎么判断内存泄漏？</h3><p>可以通过内存运行曲线图来分析，在运行程序前先记录一下系统的内存使用情况，再运行所测程序一段时间，观察内存的使用情况，最后关闭这个程序或者退出这个模块，检查内存的占用率是否会下降恢复到运行前的水平，也就是内存曲线有升有降，如果没有恢复到之前的水平，内存曲线呈一直上升趋势，则表明程序存在内存泄露。</p>
<p>1）perfdog怎么用的<br>2）perfdog哪些指标<br>3）指标的值是多少？<br>4）指标值是怎么来的？<br>5）发什么bug？<br>6）挑出一个bug，让你说原理</p>
<h1 id="接口测试"><a href="#接口测试" class="headerlink" title="接口测试"></a>接口测试</h1><blockquote>
<p>批处理(Batch)，也称为批处理脚本。顾名思义，批处理就是对某对象进行批量的处理，通常被认为是一种简化的脚本语言，它应用于DOS和Windows系统中。批处理文件的扩展名为bat </p>
<p>bat格式的文件是黑白屏窗口式的程序</p>
</blockquote>
<p>浏览器会自动处理请求信息，会自处理cookie，每次都是发送带cookie的请求</p>
<p>app会自动处理token，移动端使用token来维持用户身份</p>
<p>http请求都要带cookie来维持身份</p>
<p>接口测试： 后端开发好了，前端还没开发好，要对后端代码进行测试</p>
<p>接口测试是在单元测试之后进行的</p>
<p>开发会给一个文档，叫接口文档，接口文档里面定义了做接口测试需要的内容，比如 地址（ip+端口），参数、协议，请求方式</p>
<p>自动化程序中，一般通过断言的方式来判断是否执行成功</p>
<h2 id="接口测试工具"><a href="#接口测试工具" class="headerlink" title="接口测试工具"></a>接口测试工具</h2><p>1）jmeter 最简单最广泛<br>2）postman（开发用的，这个需要写代码）<br>3）python （纯代码）<br>4）soapUI（收费版本，用的少）</p>
<h2 id="表单数据编码方式：（Content-type）"><a href="#表单数据编码方式：（Content-type）" class="headerlink" title="表单数据编码方式：（Content-type）"></a>表单数据编码方式：（Content-type）</h2><p>POST表单数据，在发送到服务器之前，所有提交的参数字符都会进行编码，你发过来的参数是有一定格式的。先编码再发送给服务器（否则服务器拒绝处理），有如下4种：</p>
<ol>
<li>application&#x2F;x-www-form-urlencoded: 发送键值对，用 &amp;分隔参数 ，是表单默认的提交的编码方式</li>
<li>application&#x2F;json：表单数据以json格式进行编码，书写是键值对格式，用逗号为分隔参数</li>
<li>multipart&#x2F;form-data: 传输格式多样化（二进制，键值对都可以），最终它会将表单的数据处理为一条消息，以标签为单元，用分隔符分开，用于上传文件或者图片</li>
<li>text&#x2F;plain: 表单数据以纯文本形式进行编码，浏览器不会对其处理，是什么就显示什么（不常用）</li>
</ol>
<h2 id="接口测试流程？"><a href="#接口测试流程？" class="headerlink" title="接口测试流程？"></a>接口测试流程？</h2><ol>
<li>首先我们要熟悉接口文档，获得接口功能描述、接口请求方式、请求地址、请求参数、编码格式、返回参数等 </li>
<li>熟悉了接口文档后，我们就会写一个接口测试计划</li>
<li>再使用等价类、边界值分析输入参数，以及分析接口是否有前后依赖关系？</li>
<li>写接口测试用例</li>
<li>接下来，就会依照接口测试用例编写接口脚本，使用接口测试工具，比如我们用的是jmeter，那么打开jmeter，添加线程组，cookie管理器，头管理器，默认请求值、添加测试接口的HTTP请求，输入接口地址，参数，加入断言（增删改需要验证数据库记录）和查看结果树  </li>
<li>再执行接口测试用例，如果断言ok的话，就表明接口是正常的，接口测试用例执行完毕后，会对分析接口测试结果  </li>
<li>再后写接口测试报告，大概就是这个样子</li>
</ol>
<h2 id="接口返回内容包含哪些？"><a href="#接口返回内容包含哪些？" class="headerlink" title="接口返回内容包含哪些？"></a>接口返回内容包含哪些？</h2><p>接口返回内容一般包括code值、msg值、data值（data里面是一些id、time、具体的请求相关的内容）</p>
<h2 id="Jmeter"><a href="#Jmeter" class="headerlink" title="Jmeter"></a>Jmeter</h2><p>jmeter的接口测试的http请求里面填入的参数比默认值参数优先级要高</p>
<h3 id="如果有个接口测试，需要用到前一个接口的返回参数-作为输入参数-，或者是接口之间有依赖关系时，比如需要提取token之类的鉴权怎么处理？"><a href="#如果有个接口测试，需要用到前一个接口的返回参数-作为输入参数-，或者是接口之间有依赖关系时，比如需要提取token之类的鉴权怎么处理？" class="headerlink" title="如果有个接口测试，需要用到前一个接口的返回参数(作为输入参数)，或者是接口之间有依赖关系时，比如需要提取token之类的鉴权怎么处理？"></a>如果有个接口测试，需要用到前一个接口的返回参数(作为输入参数)，或者是接口之间有依赖关系时，比如需要提取token之类的鉴权怎么处理？</h3><p>我们一般采用JSON提取器或者正则表达式提取器，将前个接口的返回内容中的关联字段提取出来，保存到一个变量中，然后在后续的接口中代入这个变量即可</p>
]]></content>
  </entry>
</search>
